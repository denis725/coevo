function [x c w maxGen pA pB]=coevo_ana_05(...
        xInit,...                   % initial conditions
        tmax,...                    % periods per generation
        gen,...                     % generations
        selCoef,...                 % maximum selection coefficient
        nStrats,...                 % total possible number of strategies
        vertTransm,...              % whether there is vertical transmission
        regime,...                  % how the environment changes. 0->no regression to the mean, 1->medium, 32->high
        pA0,...
        pB0,...                     % initial values of pA and pB
        incr,...                    % increment at which the environment becomes better or worse
        pincr);                     % probability that environmental quality changes at all after each period
        
            
% INITIALIZATION
x=zeros(nStrats,gen);       % frequency matrix
c=zeros(nStrats,tmax);      % percent correct choices matrix
w=zeros(nStrats,gen);       % fitness matrix

x(:,1)=xInit;

for g=1:gen
    
    % ENVIRONMENT
    % routine to determine pA and pB
    [pA,pB] = randomenvironment2(tmax,regime,incr,pincr,pA0,pB0);
    % we define C is the better and F as the worse choice
    pC=max(pA,pB);
    pF=min(pA,pB);
    % remember last pA and pB
    pA0=pA(tmax);pB0=pB(tmax);
    % when do switches occur? if switch -> tSwitch=-1
    pDif=sign(pA-pB);
    tSwitch=[1 pDif(2:tmax).*pDif(1:tmax-1)];
    
    % FIRST PERIOD'S CHOICE OF THE STRATEGIES
    if g==1|vertTransm==0     % in very first generation
        c(:,1)=1/2;
    else
        c(:,1)=clast;
    end
    
    % CHOICES OF THE STRATEGIES
    for t=2:tmax
        
        % certain fixed probabilities that are used repeatedly:

        % PBSLs 1
        p31=pC(t)^3+3*pC(t)*(1-pC(t));
        p32=3*pC(t)^2*pF(t)+3*pC(t)^2*(1-pF(t))+6*pC(t)*(1-pC(t))*(1-pF(t));
        p33=6*pC(t)*pF(t)*(1-pF(t))+3*pC(t)*(1-pF(t))^2+3*(1-pC(t))*(1-pF(t))^2;
        p34=3*pF(t)*(1-pF(t))^2+(1-pF(t))^3;

        % PBSLs 2
        p41=pC(t)^3+3*pC(t)^2*(1-pC(t))+3*pC(t)*(1-pC(t))^2;
        p42=p32;
        p43=p33;
        p44=(1-pF(t))^3;

        % PBSLs 3
        p51=1;
        p52=3*pC(t)^2*pF(t)+3*pC(t)^2*(1-pF(t))+6*pC(t)*(1-pC(t))*(1-pF(t))+3*(1-pC(t))^2*(1-pF(t));
        p53=6*pC(t)*pF(t)*(1-pF(t))+3*pC(t)*(1-pF(t))^2;
        p54=0;
        
        % in case of environmental change
        if tSwitch(t-1)<0
            c(:,t-1)=1-c(:,t-1);
        end
        
        % mean proportion of correct choices
        cmean=x(1,g)*c(1,t-1)+x(2,g)*c(2,t-1)+x(3,g)*c(3,t-1)+...
            x(4,g)*c(4,t-1)+x(5,g)*c(5,t-1)+x(6,g)*c(6,t-1)+...
            x(7,g)*c(7,t-1);
        
        % individual learners
        cind=(1-pF(t))/(2-pC(t)-pF(t));
        c(1,t)=cind;
        
        % conformists
        c(2,t)=(3-2*cmean)*cmean^2;

        % PBSL equal weight
        c(3,t)=cmean^3*         p31+...
            cmean^2*(1-cmean)*3*p32+...
            cmean*(1-cmean)^2*3*p33+...
            (1-cmean)^3*        p34;
        
        % PBSL more weight gains
        c(4,t)=cmean^3*         p41+...
            cmean^2*(1-cmean)*3*p42+...
            cmean*(1-cmean)^2*3*p43+...
            (1-cmean)^3*        p44;
        
        % PBSL Å• la McElreath et al 2008
        c(5,t)=cmean^3*         p51+...
            cmean^2*(1-cmean)*3*p52+...
            cmean*(1-cmean)^2*3*p53+...
            (1-cmean)^3*        p54;
        
        % opportunistic individual learner
        c(6,t)=(cind-cind*pF+(3-2*cmean)*cmean^2*pF)/...
            (1+(cind+cmean^2*(-3+2*cmean))*(pC-pF));
        
          
        % opportunistic conformist
        if (pC==1&pF==0)
            % this check must be included to avert dividing by 0
            c(7,t)=1;
        else
            c(7,t)=(-cmean^2*(-3+2*cmean)*(pF-1)-cind*pF)/...
                (-1+(cind+cmean^2*(-3+2*cmean))*(pC-pF));            
        end
        
        % pbsl tn=7, loss/gains = 3/1
        c(8,t)=1 - cmean^4*(-1 + pC)^2*(35*(-1 + pC)^2 -...
            70*cmean^2*(-1 + 4*pC - 4*pC^3 + pC^4) - ...
            42*cmean*(2 + pC*(-6 + pC + 3*pC^2)) + ...
            cmean^3*(-20 + pC*(100 + pC*(10 + 3*pC*...
            (-50 + pC*(25 + 2*pC)))))) + 35*(-1 + cmean)...
            *cmean^3*(-1 + pC)^2*(4 - 12*cmean*(-1 + pC)^2 -...
            4*pC + 12*cmean^2*(1 + (-1 + pC)*pC*(3 + pC)) +...
            cmean^3*(-4 + pC*(16 + 3*pC*(-4 + (-4 + pC)*pC))))*pF +...
            105*(-1 + cmean)^2*cmean^3*(-1 + pC)*(-2 + 10*pC -...
            8*pC^2 - 2*cmean*(-1 + pC)*(2 + 5*(-2 + pC)*pC) +...
            cmean^2*(-2 + pC*(14 + pC*(-22 + pC*(8 + 3*pC)))))*pF^2 -...
            70*(-1 + cmean)^3*cmean^2*(-1 + pC)*(3 - 3*pC + ...
            cmean*(-4 + 10*pC*(-1 + 2*pC) + cmean*(1 + ...
            5*pC*(3 + 2*(-3 + pC)*pC))))*pF^3 - 35*(-1 + ...
            cmean)^4*cmean*(3 - 15*cmean*(-1 + pC)^2 - 3*pC + ...
            cmean^2*(11 + 5*pC*(-3 + pC*(-3 + 4*pC))))*pF^4 + ...
            21*(-1 + cmean)^5*cmean*(-8 + 10*pC + cmean*(14 + ...
            15*(-2 + pC)*pC))*pF^5 + 7*(-1 + cmean)^6*(-1 + ...
            3*cmean*(-3 + 5*pC))*pF^6 - 6*(-1 + cmean)^7*pF^7;
          
        % pbsl tn=7, equal weights
        c(9,t)=-((1 - pF + cmean*(-1 + pC + pF))^4*(-1 + ...
            20*cmean^3*(-1 + pC + pF)^3 - 10*cmean^2*(-1 + ...
            pC + pF)^2*(1 + 6*pF) - 2*pF*(2 + 5*pF*(1 + 2*pF)) + ...
            4*cmean*(-1 + pC + pF)*(1 + 5*pF*(1 + 3*pF))));
        
        % pbsl tn=7, loss/gains = 1/3
        c(10,t)=1 - cmean^4*(-1 + pC)^4*(35 - 21*cmean*(4 + ...
            pC) - 35*cmean^2*(-2 + (-2 + pC)*pC) + cmean^3*(-20 + ...
            3*pC*(-15 + 2*pC*(4 + pC)))) + 35*(-1 + cmean)*cmean^2*(-1 + ...
            pC)^2*(3 + cmean*(-4*(2 + pC) + cmean*(6 - 12*(-2 + ...
            pC)*pC + 6*cmean*pC*(-5 + pC*(2 + pC)) + cmean^2*(-1 + ...
            pC*(10 + 3*pC*(1 + (-4 + pC)*pC))))))*pF + 21*(-1 + ...
            cmean)^2*(-1 + 5*cmean*pC + 10*cmean^2*(2 + 3*(-2 + ...
            pC)*pC) - 10*cmean^3*(4 - 9*pC + 4*pC^3) + 5*cmean^4*(5 - ...
            2*pC^2*(18 + 5*(-4 + pC)*pC)) + cmean^5*(-4 + ...
            5*pC*(-6 + pC*(24 - 20*pC + 3*pC^3))))*pF^2 - 70*(-1 + ...
            cmean)^3*(1 - 6*cmean*pC - 9*cmean^2*(1 + 2*(-2 + pC)*pC) + ...
            2*cmean^4*(-1 + pC)*(2 + 5*(-3 + pC)*pC^2) + 4*cmean^3*(3 - ...
            9*pC + 5*pC^3))*pF^3 - 35*(-1 + cmean)^4*(3 + ...
            2*cmean*(-9*pC + cmean*(-6 - 15*(-2 + pC)*pC + cmean*(4 - ...
            15*pC + 10*pC^3))))*pF^4 + 21*(-1 + cmean)^5*(-4 + ...
            5*cmean*(4*pC + cmean*(1 + 3*(-2 + pC)*pC)))*pF^5 + ...
            35*(-1 + cmean)^6*(-1 + 3*cmean*pC)*pF^6 - 6*(-1 + ...
            cmean)^7*pF^7;
        
        % payoff conformist, weight A+2,a+1,B-2,b-1
        c(11,t)=(cmean^3*(105*(-1 + cmean)^3*cmean*pC^4*(-1 + ...
            pF)*pF*(-1 + 3*pF) + cmean*(70 - 4*cmean*(42 + ...
            5*cmean*(-7 + 2*cmean)) + 105*(-1 + cmean)^3*pF - ...
            35*(-1 + cmean)^3*pF^3) + 105*(-1 + cmean)^3*pC*(-1 + ...
            pF)*(1 - cmean + pF*(-3 + 7*cmean + (-1 + cmean)*(-3 + ...
            pF)*pF)) - 210*(-1 + cmean)^3*pC^2*pF*(-2*(-1 + pF)^3 + ...
            cmean*(-5 + 2*pF*(6 + (-4 + pF)*pF))) + 35*(-1 + ...
            cmean)^3*pC^3*(1 - cmean + pF*(-12*cmean + pF*(-12 + ...
            48*cmean + pF*(20 - 40*cmean + 9*(-1 + cmean)*pF))))))/2;
        
        % only count wins: weight A+1,a+0,B-1,b-0
        c(12,t)=(1 + cmean*pC*(7 + cmean*pC*(-21 + ...
            cmean*pC*(35 + cmean*pC*(-35 + cmean*pC*(21 + ...
            cmean*pC*(-7 + cmean*pC)))))) - 7*(-1 + cmean)*(-1 + ...
            cmean*pC)^5*(1 + 5*cmean*pC)*pF + 21*(-1 + cmean)^2*(-1 + ...
            cmean*pC)^3*(-1 + cmean*pC*(2 + 9*cmean*pC))*pF^2 - ...
            35*(-1 + cmean)^3*(-1 + cmean*pC*(8 - 12*cmean*pC + ...
            5*cmean^3*pC^3))*pF^3 - 35*(-1 + cmean)^4*(-1 + ...
            cmean*pC*(9 + 5*cmean*pC*(-3 + cmean*pC)))*pF^4 + ...
            21*(-1 + cmean)^5*(1 + cmean*pC*(-8 + 9*cmean*pC))*pF^5 - ...
            7*(-1 + cmean)^6*(-1 + 5*cmean*pC)*pF^6 + (-1 + ...
            cmean)^7*pF^7)/2;




        
        % somehow, matlab achieves to reach values that are infinitesimally
        % greater than 1 when certain strategies have become very rare.
        % This error screws everything, so we have to correct it
        c(:,t)=min(c(:,t),ones(nStrats,1));
    end
    
    clast=c(:,tmax);
    
    % SELECTION
    
    % fitnesses
    score=zeros(nStrats,tmax);
    score=c.*repmat(pC,nStrats,1)+(1-c).*repmat(pF,nStrats,1);
    w(:,g)=1+selCoef*(mean(score,2)-mean(score(1,:)));
    % mean fitness
    wmean=sum(w(:,g).*x(:,g));
    % frequencies updated
    x(:,g+1)=x(:,g).*w(:,g)./wmean;
    
end

maxGen=g;